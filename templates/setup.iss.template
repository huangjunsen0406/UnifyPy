#define MyAppName "{{APP_NAME}}"
#define MyAppVersion "{{APP_VERSION}}"
#define MyAppPublisher "{{APP_PUBLISHER}}"
#define MyAppURL "https://example.com/"
#define MyAppExeName "{{APP_NAME}}.exe"
#define SourcePath "{{SOURCE_PATH}}"
#define OutputPath "{{OUTPUT_PATH}}"
#define AppDisplayName "{{DISPLAY_NAME}}"

[Setup]
; 应用程序信息
AppId={{{{05DBB87C-AE34-4F2F-AEC5-3CD2AFE9DC90}}}}
AppName={#AppDisplayName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#AppDisplayName}
DefaultGroupName={#AppDisplayName}
DisableProgramGroupPage=yes
; 许可证文件设置，使用条件编译
#ifdef LicenseFile
LicenseFile=LICENSE.txt
#endif
; 安装程序界面设置
OutputDir={#OutputPath}
OutputBaseFilename={#MyAppName}_Setup
; 图标设置，使用条件编译
#ifdef SetupIconFile
SetupIconFile=app.ico
#endif
Compression=lzma
SolidCompression=yes
WizardStyle=modern
; 卸载选项
UninstallDisplayIcon={app}\{#MyAppExeName}
UninstallDisplayName={#AppDisplayName}
UsePreviousAppDir=yes
CloseApplications=yes
CloseApplicationsFilter=*.*

[Languages]
Name: "chinese"; MessagesFile: "compiler:Languages\ChineseSimplified.isl"
Name: "english"; MessagesFile: "compiler:Default.isl"

[CustomMessages]
chinese.CreateDesktopIcon=创建桌面快捷方式
chinese.LaunchProgram=启动 {#AppDisplayName}
chinese.DeleteUserData=删除所有用户数据和配置文件
chinese.UninstallQuestion=确定要卸载 {#AppDisplayName} 吗？
english.CreateDesktopIcon=Create desktop icon
english.LaunchProgram=Launch {#AppDisplayName}
english.DeleteUserData=Delete all user data and configuration files
english.UninstallQuestion=Are you sure you want to uninstall {#AppDisplayName}?

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "startupicon"; Description: "开机自动启动"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
; 卸载选项任务
Name: "deleteUserData"; Description: "{cm:DeleteUserData}"; GroupDescription: "卸载选项:"; Flags: unchecked; Check: IsUninstaller

[Files]
; 主执行文件
Source: "{#SourcePath}\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion

; 包含所有DLL和资源文件
Source: "{#SourcePath}\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs; Excludes: "*.pdb,*.ipdb,*.iobj,*.lib,*.exp,*.ilk"

; 添加README和LICENSE文件
#ifdef ReadmeFile
Source: "README.md"; DestDir: "{app}"; Flags: ignoreversion
#endif
#ifdef LicenseFile
Source: "LICENSE.txt"; DestDir: "{app}"; Flags: ignoreversion
#endif
; 添加自定义文件区域 - 可在此处添加需要打包的其他文件

[Icons]
Name: "{group}\{#AppDisplayName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,{#AppDisplayName}}"; Filename: "{uninstallexe}"
Name: "{autodesktop}\{#AppDisplayName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
Name: "{commonstartup}\{#AppDisplayName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: startupicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram}"; Flags: nowait postinstall skipifsilent

[UninstallDelete]
; 删除应用程序运行时生成的文件
Type: files; Name: "{app}\*.log"
Type: files; Name: "{app}\*.tmp"
Type: files; Name: "{app}\*.dat"
; 如果用户选择了删除用户数据，则删除所有文件和目录
Type: filesandordirs; Name: "{app}\*"; Tasks: deleteUserData
Type: dirifempty; Name: "{app}"

[Code]
// 检查是否处于卸载模式
function IsUninstaller: Boolean;
begin
  Result := False;
  
  try
    // 这种方式检测是否处于卸载模式
    Result := ActiveLanguage <> '';  // 任何非安装时的函数调用
    Result := UninstallSilent or not UninstallSilent;  // 总是为真，但只在卸载模式下有效
  except
    // 如果抛出异常，那么我们处于安装模式
    Result := False;
  end;
end;

// 卸载前的确认
function InitializeUninstall: Boolean;
var
  Confirm: Integer;
begin
  Result := True;  // 默认继续卸载
  
  try
    // 显示确认对话框
    Confirm := MsgBox(ExpandConstant('{cm:UninstallQuestion}'), mbConfirmation, MB_YESNO);
    Result := (Confirm = IDYES);
  except
    // 如果出现错误，继续卸载
    Result := True;
  end;
end; 